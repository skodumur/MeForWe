/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.meforwe.meforwe.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.meforwe.meforwe.models.query.*;

@Service
public class MeforweQueryExecutorServiceImpl implements MeforweQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MeforweQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("meforweWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "meforweTransactionManager", readOnly = true)
    @Override
    public Page<MapFilterResponse> executeMapFilter(LocalDateTime dt, Integer zc, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("dt", dt);
        params.put("zc", zc);

        return queryExecutor.executeNamedQuery("mapFilter", params, MapFilterResponse.class, pageable);
    }

    @Transactional(value = "meforweTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportMapFilter(LocalDateTime dt, Integer zc, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("dt", dt);
        params.put("zc", zc);

        QueryProcedureInput queryInput = new QueryProcedureInput("mapFilter", params, MapFilterResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "meforweTransactionManager", readOnly = true)
    @Override
    public Page<DistinctTypesResponse> executeDistinct_types(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("distinct_types", params, DistinctTypesResponse.class, pageable);
    }

    @Transactional(value = "meforweTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportDistinct_types(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("distinct_types", params, DistinctTypesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "meforweTransactionManager", readOnly = true)
    @Override
    public Page<TodayEventsResponse> executeTodayEvents(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("todayEvents", params, TodayEventsResponse.class, pageable);
    }

    @Transactional(value = "meforweTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTodayEvents(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("todayEvents", params, TodayEventsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}