/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.meforwe.meforwe.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.time.LocalDateTime;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.meforwe.meforwe.service.MeforweQueryExecutorService;
import com.meforwe.meforwe.models.query.*;

@RestController(value = "Meforwe.QueryExecutionController")
@RequestMapping("/meforwe/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private MeforweQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/mapFilter", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "mapFilter")
    public Page<MapFilterResponse> executeMapFilter(@RequestParam(value = "dt", required = false) LocalDateTime dt, @RequestParam(value = "zc", required = false) Integer zc, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: mapFilter");
        Page<MapFilterResponse> _result = queryService.executeMapFilter(dt, zc, pageable);
        LOGGER.debug("got the result for named query: mapFilter, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query mapFilter")
    @RequestMapping(value = "/queries/mapFilter/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMapFilter(@RequestParam(value = "dt", required = false) LocalDateTime dt, @RequestParam(value = "zc", required = false) Integer zc, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: mapFilter");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "mapFilter";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportMapFilter(dt, zc,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/distinct_types", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "distinct_types")
    public Page<DistinctTypesResponse> executeDistinct_types(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: distinct_types");
        Page<DistinctTypesResponse> _result = queryService.executeDistinct_types(pageable);
        LOGGER.debug("got the result for named query: distinct_types, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query distinct_types")
    @RequestMapping(value = "/queries/distinct_types/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDistinct_types(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: distinct_types");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "distinct_types";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportDistinct_types( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/todayEvents", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "todayEvents")
    public Page<TodayEventsResponse> executeTodayEvents(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: todayEvents");
        Page<TodayEventsResponse> _result = queryService.executeTodayEvents(pageable);
        LOGGER.debug("got the result for named query: todayEvents, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query todayEvents")
    @RequestMapping(value = "/queries/todayEvents/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTodayEvents(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: todayEvents");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "todayEvents";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTodayEvents( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}